#base libraries for working with IFC files 
import ifcopenshell
import ifcopenshell.util
import ifcopenshell.util.element
from ifcopenshell.api import run

#used for wall matrix creation , location, orientation
import numpy

#used for reloading ifc file dynamically
import blenderbim.tool.ifcgit
import bpy
import logging
from blenderbim.bim import import_ifc
from blenderbim.bim.ifc import IfcStore
import blenderbim.tool as tool
import re
import os


#need this additional definition
def delete_collection(blender_collection):
        for obj in blender_collection.objects:
            bpy.data.objects.remove(obj, do_unlink=True)
        bpy.data.collections.remove(blender_collection)
        
        
# bruno's definition from IfcGit Tool in blenderbim-blenderbim-tools-
def load_project(path_ifc=""):
        """Clear and load an ifc project"""

        if path_ifc:
            IfcStore.purge()
        else:
            print("No ifc path in def load project")
            pass
        # delete any IfcProject/* collections
        for collection in bpy.data.collections:
            if re.match("^IfcProject/", collection.name):
                delete_collection(collection)
            else:
                pass
        # delete any Ifc* objects not in IfcProject/ heirarchy
        for obj in bpy.data.objects:
            if re.match("^Ifc", obj.name):
                bpy.data.objects.remove(obj, do_unlink=True)

        bpy.data.orphans_purge(do_recursive=True)


        settings = import_ifc.IfcImportSettings.factory(bpy.context, path_ifc, logging.getLogger("ImportIFC"))
        settings.should_setup_viewport_camera = False
        ifc_importer = import_ifc.IfcImporter(settings)
        ifc_importer.execute()
        tool.Project.load_pset_templates()
        tool.Project.load_default_thumbnails()
        tool.Project.set_default_context()
        tool.Project.set_default_modeling_dimensions()
        bpy.ops.object.select_all(action="DESELECT")
        
        print("load success")
        

        



#step 1 ------------------ load the ifc file
load_project(path_ifc = 'c:\dev\lukemod.ifc')




#step 2 ------------------ Create new ifc file


model = ifcopenshell.file()

IfcStore.file = model

# All projects must have one IFC Project element
project = run("root.create_entity", model, ifc_class="IfcProject", name="My Project")



# Geometry is optional in IFC, but because we want to use geometry in this example, let's define units
# Assigning without arguments defaults to metric units
run("unit.assign_unit", model)

# Let's create a modeling geometry context, so we can store 3D geometry (note: IFC supports 2D too!)
context = run("context.add_context", model, context_type="Model")

# In particular, in this example we want to store the 3D "body" geometry of objects, i.e. the body shape
body = run("context.add_context", model, context_type="Model",
    context_identifier="Body", target_view="MODEL_VIEW", parent=context)

# Create a site, building, and storey. Many hierarchies are possible.
site = run("root.create_entity", model, ifc_class="IfcSite", name="My Site")
building = run("root.create_entity", model, ifc_class="IfcBuilding", name="Building A")
storey = run("root.create_entity", model, ifc_class="IfcBuildingStorey", name="Ground Floor")

# Since the site is our top level location, assign it to the project
# Then place our building on the site, and our storey in the building
run("aggregate.assign_object", model, relating_object=project, product=site)
run("aggregate.assign_object", model, relating_object=site, product=building)
run("aggregate.assign_object", model, relating_object=building, product=storey)







#------------------------modify file---------------------------
#add some new walls



#try to add wall data - work more on this later
data = {
    'GlobalId': ifcopenshell.guid.new(),
    'Name': 'Lukes new wall'
}
#model.create_entity('IfcWall', **data)




#-------------------create wall with numpy matrix-------------------

# Let's create a new wall
wall2 = run("root.create_entity", model, ifc_class="IfcWall")


#create location and rotation of new wall----------------

# Create a 4x4 identity matrix. This matrix is at the origin with no rotation.
matrix = numpy.eye(4)

# Rotate the matix 90 degrees anti-clockwise around the Z axis (i.e. in plan).
# Anti-clockwise is positive. Clockwise is negative.
matrix = ifcopenshell.util.placement.rotation(90, "Z") @ matrix

# Set the X, Y, Z coordinates. Notice how we rotate first then translate.
# This is because the rotation origin is always at 0, 0, 0.
matrix[:,3][0:3] = (2, 3, 5)


# use matrix
run("geometry.edit_object_placement", model, product=wall2, matrix = matrix)

# Add a new wall-like body geometry, 5 meters long, 3 meters high, and 200mm thick
representation = run("geometry.add_wall_representation", model, context=body, length=10, height=3, thickness=0.1)
# Assign our new body geometry back to our wall
run("geometry.assign_representation", model, product=wall2, representation=representation)

# Place our wall in the ground floor
run("spatial.assign_container", model, relating_structure=storey, product=wall2)

wall2.Name = 'Lukes new wall 2'



# create another wall using a custom definition
# create a simple utility to make walls easier
def createwall(newname, storey, rotation, location, mythickness, mylength, myheight):
    # Let's create a new wall
    wallname = run("root.create_entity", model, ifc_class="IfcWall")


    #create location and rotation of new wall----------------

    # Create a 4x4 identity matrix. This matrix is at the origin with no rotation.
    matrix = numpy.eye(4)

    # Rotate the matix 90 degrees anti-clockwise around the Z axis (i.e. in plan).
    # Anti-clockwise is positive. Clockwise is negative.
    matrix = ifcopenshell.util.placement.rotation(rotation, "Z") @ matrix

    # Set the X, Y, Z coordinates. Notice how we rotate first then translate.
    # This is because the rotation origin is always at 0, 0, 0.
    matrix[:,3][0:3] = location


    # use matrix
    run("geometry.edit_object_placement", model, product=wallname, matrix = matrix)

    # Add a new wall-like body geometry, 5 meters long, 3 meters high, and 200mm thick
    representation = run("geometry.add_wall_representation", model, context=body, length=mylength, height=myheight, thickness=mythickness)
    # Assign our new body geometry back to our wall
    run("geometry.assign_representation", model, product=wallname, representation=representation)

    # Place our wall in the ground floor
    run("spatial.assign_container", model, relating_structure=storey, product=wallname)

    wallname.Name = newname

        

#create some walls using the custom utility

createwall('wall 1', storey, 0, [5,5,1],.3,12,1)



#-------------------------create a wall using creat_2pt_wall-------------------------
# Let's create a new wall using 2 points

#create root entity
wallfromPts = run("root.create_entity", model, ifc_class="IfcWall")

#create two points
pt1 = (1,2,3)
pt2 = (2,2,3)

element = wallfromPts

newrepresentation = run ("geometry.create_2pt_wall", model, element = element, context = body, p1 = pt1, p2 = pt2, elevation = 0, height = 2.4, thickness = 0.2, is_si = True)

#assign representation to new wall
run ("geometry.assign_representation",model, product = wallfromPts, representation = newrepresentation)

#assign new wall to spatial container
run("spatial.assign_container", model, relating_structure = storey, product = wallfromPts)
 
#change its name if you want

wallfromPts.Name = "wallfromPts"






#re write file
model.write('c:\dev\lukemod.ifc')
